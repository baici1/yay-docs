import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as n,c as a,a as t,b as e,f as l,d}from"./app-12e502b6.js";const h={},s=d('<h1 id="http篇" tabindex="-1"><a class="header-anchor" href="#http篇" aria-hidden="true">#</a> HTTP篇</h1><h2 id="_1-http是什么" tabindex="-1"><a class="header-anchor" href="#_1-http是什么" aria-hidden="true">#</a> 1.HTTP是什么？</h2><blockquote><p>HTTP 是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol。</p></blockquote><h2 id="_2-超文本传输协议怎么理解" tabindex="-1"><a class="header-anchor" href="#_2-超文本传输协议怎么理解" aria-hidden="true">#</a> 2.超文本传输协议怎么理解？</h2><p>超文本传输协议可以分为三个部分：</p><ul><li>超文本</li></ul><blockquote><p>文字，图片，视频等的混合体</p></blockquote><ul><li>传输</li></ul><blockquote><p>可以两点之间进行全双工传输数据</p></blockquote><ul><li>协议</li></ul><blockquote><p>确立了一种计算机之间交流通信的规范，以及各种控制以及错误处理方式</p></blockquote><p>总结的讲：</p><blockquote><p>HTTP是一种在计算机世界里专门在两点之间传输文字，图片，视频等超文本数据的约定和规范</p></blockquote><h2 id="_3-http的状态码有哪些" tabindex="-1"><a class="header-anchor" href="#_3-http的状态码有哪些" aria-hidden="true">#</a> 3.HTTP的状态码有哪些？</h2><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20210922204606.png" alt=" 五大类 HTTP 状态码 " tabindex="0" loading="lazy"><figcaption> 五大类 HTTP 状态码 </figcaption></figure><table><thead><tr><th>200</th><th>OK</th><th>请求成功。一般用于GET与POST请求</th></tr></thead><tbody><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr></tbody></table><table><thead><tr><th>300</th><th>Multiple Choices</th><th>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr></tbody></table><table><thead><tr><th>400</th><th>Bad Request</th><th>客户端请求的语法错误，服务器无法理解</th></tr></thead><tbody><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr></tbody></table><table><thead><tr><th>500</th><th>Internal Server Error</th><th>服务器内部错误，无法完成请求</th></tr></thead><tbody><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr></tbody></table><h2 id="_4-http常见的字段有哪些" tabindex="-1"><a class="header-anchor" href="#_4-http常见的字段有哪些" aria-hidden="true">#</a> 4.HTTP常见的字段有哪些？</h2>',20),c=t("thead",null,[t("tr",null,[t("th",null,"常见字段"),t("th",null,"描述"),t("th",null,"常见值")])],-1),u=t("td",null,"Host",-1),p=t("td",null,"指定服务器的域名",-1),T={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},b=t("tr",null,[t("td",null,"Content-Length"),t("td",null,"表明本次回应数据长度"),t("td",null,"1000（字节）")],-1),g=t("tr",null,[t("td",null,"Connection"),t("td",null,"常用于客户端要求服务器使用TCP持久连接"),t("td",null,"Keep-Alive")],-1),P=t("tr",null,[t("td",null,"Content-Type"),t("td",null,"用于服务器回应本次数据的格式"),t("td",null,"text/html; charset=utf-8")],-1),_=t("tr",null,[t("td",null,"Content-Encoding"),t("td",null,"表明服务器返回的数据用的数据压缩的格式"),t("td",null,"gzip")],-1),S=t("h2",{id:"_5-get与post的区别",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_5-get与post的区别","aria-hidden":"true"},"#"),e(" 5.GET与POST的区别")],-1),k={href:"https://www.cnblogs.com/logsharing/p/8448446.html",target:"_blank",rel:"noopener noreferrer"},H=d('<blockquote><p>HTTP 协议中的两种发送请求的方法。</p><p>GET：请求<strong>从服务器获取资源</strong></p><p>POST：它向 <code>URI</code> 指定的资源提交数据，数据就放在报文的 body 里。</p></blockquote><p>HTTP 是什么？</p><blockquote><p>HTTP 是基于 TCP/IP 的关于数据如何在万维网中如何通信的协议。</p></blockquote><blockquote><p>HTTP 的底层是 TCP/IP。所以 GET 和 POST 的底层也是 TCP/IP，也就是说，GET/POST 都是 TCP 链接。GET 和 POST 能做的事情是一样一样的。你要给 GET 加上 request body，给 POST 带上 url 参数，技术上是完全行的通的。</p></blockquote><blockquote><p>之所以会有区别是因为（大多数）浏览器通常都会限制 url 长度在 2K 个字节，而（大多数）服务器最多处理 64K 大小的 url。超过的部分，恕不处理。如果你用 GET 服务，在 request body 偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然 GET 可以带 request body，也不能保证一定能被接收到哦。</p></blockquote><blockquote><p>GET 和 POST 本质上就是 TCP 链接，并无差别。<strong>但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</strong></p></blockquote><h2 id="_6-http的优缺点是哪些" tabindex="-1"><a class="header-anchor" href="#_6-http的优缺点是哪些" aria-hidden="true">#</a> 6.HTTP的优缺点是哪些？</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li>简单</li></ol><blockquote><p>HTTP 基本的报文格式就是 <code>header + body</code>，头部信息也是 <code>key-value</code> 简单文本的形式，</p></blockquote><ol start="2"><li>灵活易于扩展</li></ol><blockquote><p>HTTP协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定死，都允许开发人员<strong>自定义和扩充</strong>。</p></blockquote><ol start="3"><li>应用广泛</li></ol><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ol><li>无状态双刃剑</li></ol><blockquote><p>服务器不会记忆HTTP状态，减轻了服务器的负担，但是操作有关联性就会很麻烦。</p></blockquote><p>解决方式：</p><p>cookie与session模式</p>',18),q={href:"https://www.yuque.com/docs/share/18784a15-4626-4690-a147-db3a6094489a?#",target:"_blank",rel:"noopener noreferrer"},f=d('<ol start="2"><li>明文传输</li></ol><blockquote><p>虽然方便阅读报文信息，但是极易被窃取</p></blockquote><p>解决方式：HTTPS技术进行加密</p><ol start="3"><li>不安全</li></ol><blockquote><ul><li>（<strong>窃听风险</strong>）通信使用明文（不加密），内容可能会被窃听。比如，<strong>账号信息容易泄漏，那你号没了。</strong></li><li>（<strong>篡改风险</strong>）不验证通信方的身份，因此有可能遭遇伪装。比如，<strong>访问假的淘宝、拼多多，那你钱没了。</strong></li><li>（<strong>冒充风险</strong>）无法证明报文的完整性，所以有可能已遭篡改。比如，<strong>网页上植入垃圾广告，视觉污染，眼没了。</strong></li></ul></blockquote><p>解决方式：HTTPS技术</p><h2 id="_7-http与https有哪些区别" tabindex="-1"><a class="header-anchor" href="#_7-http与https有哪些区别" aria-hidden="true">#</a> 7.HTTP与HTTPS有哪些区别</h2><ul><li>加密性：HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li><li>是否使用证书： 使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li><li>响应速度：HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li><li>连接方式：http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li>协议：HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li></ul><h2 id="_8-https是如何解决http的不安全风险" tabindex="-1"><a class="header-anchor" href="#_8-https是如何解决http的不安全风险" aria-hidden="true">#</a> 8.HTTPS是如何解决HTTP的不安全风险</h2><ul><li><strong>混合加密</strong>的方式实现信息的<strong>机密性</strong>，解决了窃听的风险。</li><li><strong>摘要算法</strong>的方式来实现<strong>完整性</strong>，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。</li><li>将服务器公钥放入到<strong>数字证书</strong>中，解决了冒充的风险。</li></ul><h2 id="_9-https是如何建立起来的-其中交互了什么" tabindex="-1"><a class="header-anchor" href="#_9-https是如何建立起来的-其中交互了什么" aria-hidden="true">#</a> 9.HTTPS是如何建立起来的，其中交互了什么？</h2><p>SSL/TLS协议基本流程</p><ul><li>客户端向服务器索要并验证服务器的公钥</li><li>双方协商产生<strong>会话密钥</strong></li><li>双方采用<strong>会话密钥</strong>进行加密通信</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211007161831.png" alt="HTTPS 连接建立过程" tabindex="0" loading="lazy"><figcaption>HTTPS 连接建立过程</figcaption></figure><p>SSL/TLS协议建立的详细流程：</p><ol><li>ClientHello</li></ol><blockquote><p>首先客户端向服务器发起加密通信请求–<code>ClinetHello</code>请求</p><p>主要发送以下信息：</p><ol><li>客户端支持的SSL/TLS协议版本号。</li><li>客户端生产的随机数<code>Clinet Random</code> 后面用于会话密钥</li><li>客户端支持的密码套件列表</li></ol></blockquote><ol start="2"><li>ServerHello</li></ol><blockquote><p>服务器收到客户端请求后，先发送确定响应报文，然后接着发送<code>ServerHello</code> ,内容如下：</p><ul><li>确认SSL/TLS协议版本，如果浏览器不支持，则关闭通信</li><li>服务器生产的随机数<code>Server Random</code> 后面用于生产会话密钥</li><li>确认密码套件列表</li><li>服务器的数字证书</li></ul></blockquote><ol start="3"><li>客户端验证</li></ol><blockquote><p>客户端收到服务器发送的报文后，执行的步骤如下：</p><ul><li>通过浏览器或操作系统的CA密钥，确认服务器发送的数字证书真实性</li><li>如果没有问题，客户端会取出数字证书中的公钥，然后用它加密报文，报文信息如下 <ul><li>一个随机数（<code>pre-master key</code>）</li><li>加密通信算法改变通知，表示随后的信息都将用会话密钥加密通信</li><li>客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。</li></ul></li></ul></blockquote><ol start="4"><li>服务器的回应</li></ol><blockquote><p>客户端收到了客户端的第三个随机数<code>pre-master key</code> 之后，通过协商的加密算法，计算本次的会话密钥。然后发送最后的信息：</p><ul><li>加密通信算法改变通知，后续的信息都将用会话密钥加密通信</li><li>服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。</li></ul></blockquote><p>整个 SSL/TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信。</p><p>会话密钥有<strong>三个随机数以及加密算</strong>法而合成</p><ul><li>客户端生产的随机数<code>Client Random</code></li><li>服务器生产的随机数<code>Server Random</code></li><li>第三个随机数<code>pre-master key</code></li></ul>',26);function m(y,C){const o=i("ExternalLinkIcon");return n(),a("div",null,[s,t("table",null,[c,t("tbody",null,[t("tr",null,[u,p,t("td",null,[t("a",T,[e("www.baidu.com"),l(o)])])]),b,g,P,_])]),S,t("p",null,[e("推荐博客："),t("a",k,[e("https://www.cnblogs.com/logsharing/p/8448446.html"),l(o)]),e(" GET 和 POST 是什么？")]),H,t("p",null,[e("推荐博客："),t("a",q,[e("https://www.yuque.com/docs/share/18784a15-4626-4690-a147-db3a6094489a?#"),l(o)]),e(" 《用户认证》")]),f])}const E=r(h,[["render",m],["__file","02.HTTP篇.html.vue"]]);export{E as default};
