const n=JSON.parse('{"key":"v-56ff9282","path":"/language/Go/10.%E6%96%B9%E6%B3%95.html","title":"方法","lang":"en-US","frontmatter":{"title":"方法","date":"2022-07-01T20:53:31.000Z","category":["语言基础","go"],"author":{"name":"团子","url":"https://github.com/baici1"},"comment":false,"description":"方法 参考阅读：【Golang】方法 Method 介绍 方法即 Method，只要你接触过面对对象思想的语言，都会了解。Go 语言支持为任意类型实现方法。 举个例子🌰： type A struct { \\tname string } func (a A) Name() string { \\ta.name = \\"Hi! \\" + a.name \\treturn a.name } func main() { \\ta := A{name: \\"eggo\\"} \\t// 1）编译器的语法糖，提供面向对象的语法 \\tfmt.Println(a.Name())//Hi! eggo \\t// 2）更贴近真实实现的写法，和普通函数调用几乎没什么不同 \\tfmt.Println(A.Name(a))//Hi! eggo }","icon":null,"isOriginal":true,"star":false,"article":true,"timeline":true,"image":null,"banner":null,"head":[["meta",{"property":"og:url","content":"https://yay-docs.yangdiy.cn/language/Go/10.%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"yay-docs"}],["meta",{"property":"og:title","content":"方法"}],["meta",{"property":"og:description","content":"方法 参考阅读：【Golang】方法 Method 介绍 方法即 Method，只要你接触过面对对象思想的语言，都会了解。Go 语言支持为任意类型实现方法。 举个例子🌰： type A struct { \\tname string } func (a A) Name() string { \\ta.name = \\"Hi! \\" + a.name \\treturn a.name } func main() { \\ta := A{name: \\"eggo\\"} \\t// 1）编译器的语法糖，提供面向对象的语法 \\tfmt.Println(a.Name())//Hi! eggo \\t// 2）更贴近真实实现的写法，和普通函数调用几乎没什么不同 \\tfmt.Println(A.Name(a))//Hi! eggo }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-05-31T15:06:12.000Z"}],["meta",{"property":"article:author","content":"团子"}],["meta",{"property":"article:published_time","content":"2022-07-01T20:53:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-31T15:06:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-01T20:53:31.000Z\\",\\"dateModified\\":\\"2023-05-31T15:06:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"团子\\",\\"url\\":\\"https://github.com/baici1\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"值接收者","slug":"值接收者","link":"#值接收者","children":[]},{"level":2,"title":"指针接收者","slug":"指针接收者","link":"#指针接收者","children":[]},{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[]},{"level":2,"title":"方法的 Function value","slug":"方法的-function-value","link":"#方法的-function-value","children":[]}],"git":{"createdTime":1685545572000,"updatedTime":1685545572000,"contributors":[{"name":"Y先生","email":"249337001@qq.com","commits":1}]},"readingTime":{"minutes":5.61,"words":1683},"filePathRelative":"language/Go/10.方法.md","localizedDate":"July 1, 2022","excerpt":"<h1> 方法</h1>\\n<blockquote>\\n<p>参考阅读：<a href=\\"https://mp.weixin.qq.com/s/z2i1evUStbMHOZwq__SmRQ\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【Golang】方法 Method</a></p>\\n</blockquote>\\n<h2> 介绍</h2>\\n<p>方法即 <code>Method</code>，只要你接触过面对对象思想的语言，都会了解。Go 语言支持为任意类型实现方法。</p>\\n<p>举个例子🌰：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> A <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tname <span class=\\"token builtin\\">string</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>a A<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n\\ta<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hi! \\"</span> <span class=\\"token operator\\">+</span> a<span class=\\"token punctuation\\">.</span>name\\n\\t<span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">.</span>name\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\ta <span class=\\"token operator\\">:=</span> A<span class=\\"token punctuation\\">{</span>name<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"eggo\\"</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">// 1）编译器的语法糖，提供面向对象的语法</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Name</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//Hi! eggo</span>\\n\\t<span class=\\"token comment\\">// 2）更贴近真实实现的写法，和普通函数调用几乎没什么不同</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>A<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Name</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//Hi! eggo</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
