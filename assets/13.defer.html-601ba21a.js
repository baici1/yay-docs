import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a as n,b as s,f as t,d}from"./app-12e502b6.js";const i={},l=n("h1",{id:"defer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#defer","aria-hidden":"true"},"#"),s(" defer")],-1),u={href:"https://mp.weixin.qq.com/s/gaC2gmFhJezH-9-uxpz07w",target:"_blank",rel:"noopener noreferrer"},r=d(`<h2 id="如何延迟-因何倒序" tabindex="-1"><a class="header-anchor" href="#如何延迟-因何倒序" aria-hidden="true">#</a> 如何延迟，因何倒序</h2><p>当你开发时候，我们都会去用 <code>defer</code> 去关闭一个打开的文件，释放 <code>Mysql/Redis</code> 连接，或者解锁一个 <code>Mutex</code>。<code>Go</code> 语言的 <code>defer</code> 是一个很方便的机制，能够把某些函数调用推迟到当前函数返回前才实际执行。而且<code>Go</code> 语言在设计上保证，即使发生 <code>panic</code> ，所有的 <code>defer</code> 调用也能够被执行。不过多个 <code>defer</code> 函数是按照定义顺序倒序执行的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
0
1
2
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先来看看为什么 <code>defer</code> 会延时执行。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像上面的代码，在 <code>Go1.12</code> 编译后的伪指令是这样的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">deferproc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span> <span class="token comment">// 经过recover返回时r为1，否则为0</span>
    <span class="token keyword">if</span> r <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">goto</span> ret
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    runtime<span class="token punctuation">.</span><span class="token function">deferreturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用</span>
    <span class="token keyword">return</span>
ret<span class="token punctuation">:</span>
    runtime<span class="token punctuation">.</span><span class="token function">deferreturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如何延迟</p></blockquote><p>我们可以发现与 <code>defer</code> 指令相关的有两个部分。</p><p>第一部分是 <code>deferproc</code>，他负责保存要执行的函数信息，我们称之为defer**“注册”**。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deferproc</span><span class="token punctuation">(</span>siz <span class="token builtin">int32</span><span class="token punctuation">,</span> fn <span class="token operator">*</span>funcval<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>deferproc</code> 有两个参数，第一个参数是被注册的 <code>defer</code> 函数的参数加返回值占多少字节。这里没有参数与返回值所以为 <code>0</code>。第二个参数是一个 <code>runtime.funcval</code> 结构体的指针，指向函数入口。</p><p>第二部分是 <code>deferreturn</code>，它被编译器被插入到了函数返回前进行调用。负责执行已经注册的 <code>defer</code> 函数。这也是为什么 <code>defer</code> 函数能够延迟执行的原因。先注册后调用。</p><blockquote><p>因何倒序</p></blockquote><p><code>defer</code> 注册信息会保存到 <code>defer</code> 链表。主函数运行会自动启一个 <code>goroutine</code>，在运行时都对应一个 <code>runtime.g</code> 结构体，其中有一个 <code>_defer</code> 字段，保存的就是 <code>defer</code> 链表的头指针。</p><p><code>deferproc</code> 新注册的 <code>defer</code> 函数信息会添加到链表头部。<code>deferreturn</code> 执行时候也从链表头开始，所以<code>defer</code> 函数才会表现为倒序执行。如下图所示：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L6iaibdGLYroCCtK18JQJIyoLvsljiadJa49Uwcn8u4yeePTibmr50ZTlM0PZUyN1TsTiaxWCGVmv0rvNw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="defer-信息" tabindex="-1"><a class="header-anchor" href="#defer-信息" aria-hidden="true">#</a> defer 信息</h2><p>defer 连接的是 _defer 结构体。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    siz       <span class="token builtin">int32</span> <span class="token comment">//deferproc第一个参数传入，就是defer函数参数加返回值的总大小。</span>
    started   <span class="token builtin">bool</span> <span class="token comment">//标识defer函数是否已经开始执行；</span>
    sp        <span class="token builtin">uintptr</span> <span class="token comment">// sp at time of defer 就是注册defer函数的函数栈指针；</span>
    pc        <span class="token builtin">uintptr</span> <span class="token comment">//是deferproc函数返回后要继续执行的指令地址；</span>
    fn        <span class="token operator">*</span>funcval <span class="token comment">//由deferproc的第二个参数传入，也就是被注册的defer函数；</span>
    _panic    <span class="token operator">*</span>_panic <span class="token comment">// panic that is running defer 是触发defer函数执行的panic指针，正常流程执行defer时它就是nil；</span>
    link      <span class="token operator">*</span>_defer <span class="token comment">//自然是链到之前注册的那个_defer结构体。</span>
 <span class="token punctuation">}</span>
<span class="token comment">//参数和返回值这段空间会直接分配在_defer结构体后面，用于在注册时保存给defer函数传入的参数，并在执行时直接拷贝到defer函数的调用者栈上。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传参机制" tabindex="-1"><a class="header-anchor" href="#传参机制" aria-hidden="true">#</a> 传参机制</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A1</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//1</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
	<span class="token keyword">defer</span> <span class="token function">A1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

	a <span class="token operator">=</span> a <span class="token operator">+</span> b
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//3,2</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从函数 <code>A</code> 开始分析。</p><p>在 <code>A</code> 的函数栈中，局部变量存储了 <code>a=1,b=2</code>。开始注册 <code>defer</code> 函数，<code>deferproc</code> 函数会输入两个参数</p><ul><li>所以参数空间里面第一个参数是 <code>A1</code>的参数加返回值共占多少字节的变量，这里 <code>A1</code> 没有返回值，有参数，<code>64</code> 位下的一个 <code>int</code> 类型参数占用 <code>8</code> 个字节。</li><li>第二个参数是函数 <code>A1</code>，前面我们介绍过，没有捕获列表的 <code>Function Value</code>，在编译阶段会做出优化，就是在只读数据段分配一个共用的 <code>funcval</code> 结构体。所以函数 <code>A1</code> 的指令入口地址为 <code>addr1</code>。在只读数据段分配的指向 <code>A1</code> 指令入口的 <code>funcval</code> 结构体地址为 <code>addr2</code>，所以 <code>deferproc</code> 函数第二个参数就是 <code>addr2</code>。</li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L6iaibdGLYroCCtK18JQJIyoLTKDcibLx5NbWVBibPHlYMDElF9lpib4TzYQ63q6HU4eiadTyr7861JmvGQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>那么 A1 函数的参数 a 放哪儿呢？</p><p>上图空缺的地方就是放参数与返回值的。编译器会在 <code>deferproc</code> 函数的两个参数后面开辟一段空间，用于存储 <code>defer</code> 函数 <code>A1</code> 的返回值和参数。同时一段空间也会通过值拷贝到 <code>_defer</code> 结构体后面。所以这里空缺的部分填写 <code>a=1</code>。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/img-typora/20211205190600.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>当 <code>deferproc</code> 函数执行时候，需要堆分配一段空间，用于存放 <code>_defer</code> 结构体以及 <code>defer</code> 函数传递的参数与返回值。现在看看这个堆空间的构成。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    siz       <span class="token builtin">int32</span> <span class="token comment">//deferproc第一个参数传入，就是defer函数参数加返回值的总大小。 //8</span>
    started   <span class="token builtin">bool</span> <span class="token comment">//标识defer函数是否已经开始执行； //false</span>
    sp        <span class="token builtin">uintptr</span> <span class="token comment">// sp at time of defer 就是注册defer函数的函数栈指针； //调用栈 A 的栈指针</span>
    pc        <span class="token builtin">uintptr</span> <span class="token comment">//是deferproc函数返回后要继续执行的指令地址； //deferproc函数的返回地址return addr；</span>
    fn        <span class="token operator">*</span>funcval <span class="token comment">//由deferproc的第二个参数传入，也就是被注册的defer函数；//A1</span>
    _panic    <span class="token operator">*</span>_panic <span class="token comment">// panic that is running defer 是触发defer函数执行的panic指针，正常流程执行defer时它就是nil； //nil</span>
    link      <span class="token operator">*</span>_defer <span class="token comment">//自然是链到之前注册的那个_defer结构体。 //nil</span>
 <span class="token punctuation">}</span>
<span class="token comment">//在结构体后面还有 8 个字节用于保存传递给 A1 的参数 a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这个 <code>_defer</code> 结构体就会被添加到 defer 链表头，此时 <code>deferproc</code> 注册结束。</p><blockquote><p><em>频繁的堆分配势必影响性能，所以Go语言会预分配不同规格的deferpool，执行时从空闲_defer中取一个出来用。没有空闲的或者没有大小合适的，再进行堆分配。用完以后，再放回空闲_defer池。这样可以避免频繁的堆分配与回收。</em></p></blockquote><p><code>defer</code> 函数的注册已经完成，那么就要开始执行 <code>code</code> 相关的代码了。执行 <code>a = a + b</code> 这里的局部变量 <code>a=3</code>，随后就会输出 <code>a=3,b=2</code>。</p><p>就要到 <code>deferreturn</code> 执行 <code>defer</code> 链表了，从当前的 <code>goroutine</code> 找到链表头的 <code>_defer</code> 结构体，通过 <code>_defer.fn</code> 找到 <code>defer</code> 函数的 <code>funcval</code> 结构体，进而拿到 <code>A1</code> 函数的入口地址，接下来就是调用 <code>A1</code> 函数了。</p><p><code>_defer</code> 结构体后面的参数与返回值会拷贝到 <code>A1</code>的函数调用栈中，<code>A1</code> 开始执行，就会把之前的参数 a=1，输出来。整个过程就在这里结束了。<code>defer</code> 函数的参数会在注册时候拷贝到堆上，执行时候再拷贝到函数调用栈上。</p><h2 id="defer-闭包" tabindex="-1"><a class="header-anchor" href="#defer-闭包" aria-hidden="true">#</a> defer + 闭包</h2><p>如果此时 <code>deferproc</code> 注册是有捕获列表的 <code>Function Value</code>，又会发生什么呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		a <span class="token operator">=</span> a<span class="token operator">+</span>b
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">//5,2</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	a <span class="token operator">=</span> a <span class="token operator">+</span> b
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">//3,2</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，<code>defer</code> 函数传递了局部变量 <code>b</code> 的参数，还捕获了外层函数的局部变量 <code>a</code>，形成了闭包。我们来看看这到底会发生什么？</p><p>这里捕获变量 <code>a</code> 在闭包中被修改过，所以这里函数调用栈的局部变量 <code>a</code> 会改为堆分配，只会存储他的地址。接下来就会创建闭包对象，在堆上分配一个 <code>funcval</code> 结构体，<code>funcval.fn</code> 指向闭包函数入口 <code>addr1</code>。接下来是堆上的 _defer 结构体的构成。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    siz       <span class="token builtin">int32</span> <span class="token comment">//deferproc第一个参数传入，就是defer函数参数加返回值的总大小。 //8</span>
    started   <span class="token builtin">bool</span> <span class="token comment">//标识defer函数是否已经开始执行； //false</span>
    sp        <span class="token builtin">uintptr</span> <span class="token comment">// sp at time of defer 就是注册defer函数的函数栈指针； //调用栈 A 的栈指针</span>
    pc        <span class="token builtin">uintptr</span> <span class="token comment">//是deferproc函数返回后要继续执行的指令地址； //deferproc函数的返回地址return addr；</span>
    fn        <span class="token operator">*</span>funcval <span class="token comment">//由deferproc的第二个参数传入，也就是被注册的defer函数；//闭包函数的入口</span>
    _panic    <span class="token operator">*</span>_panic <span class="token comment">// panic that is running defer 是触发defer函数执行的panic指针，正常流程执行defer时它就是nil； //nil</span>
    link      <span class="token operator">*</span>_defer <span class="token comment">//自然是链到之前注册的那个_defer结构体。 //nil</span>
 <span class="token punctuation">}</span>
<span class="token comment">//在结构体后面还有 8 个字节用于保存传递给 闭包函数 的参数 b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_defer</code> 结构体会被添加到 defer 链表头，<code>deferproc</code> 注册结束，开始执行 <code>code</code> 的代码。</p><p>执行 <code>a = a + b</code>，局部变量 <code>a=3,b=2</code> ，然后输出。</p><p>接下来是 <code>deferreturn</code> 执行注册的 <code>defer</code> 函数，同时将参数 <code>b</code> 拷贝到执行函数的栈上。闭包函数通过寄存器存储的 <code>funcval</code> 地址加上偏移找到捕获变量 <code>a</code>。此时 <code>a=3</code>，所以执行 <code>defer</code> 函数后，捕获变量 <code>a=5，</code>，参数 <code>b=2</code>。</p><h2 id="奇怪的-defer-函数" tabindex="-1"><a class="header-anchor" href="#奇怪的-defer-函数" aria-hidden="true">#</a> 奇怪的 defer 函数</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	a<span class="token operator">++</span>
	<span class="token keyword">return</span> a
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//3</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> <span class="token number">1</span>
	<span class="token keyword">defer</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
	a<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不知道你是否已经猜到答案了？</p><p>我们来分析一波：我们需要明确一点，在 <code>main</code> 函数里面注册的是函数 <code>A</code>，所以 <code>B(a)</code> 是作为参数，同时执行 <code>B(a)</code> 拿到参数值，拷贝到堆上。所以函数 <code>B</code> 在注册时候就执行了，返回值是 <code>2</code>。然后再去执行 <code>defer</code> 函数 <code>A</code> 就会输出 <code>a=3</code>。</p><h2 id="defer-嵌套" tabindex="-1"><a class="header-anchor" href="#defer-嵌套" aria-hidden="true">#</a> defer 嵌套</h2><p>我们之前眼光聚焦于 <code>defer</code> 的细节，现在我们抛开细节，看看当发生 <code>defer</code> 嵌套时候，<code>defer</code> 函数又会怎么样注册与执行。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//......</span>
    <span class="token keyword">defer</span> <span class="token function">A1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//......</span>
    <span class="token keyword">defer</span> <span class="token function">A2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//......</span>
    <span class="token keyword">defer</span> <span class="token function">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token function">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
<span class="token comment">//所有defer函数都正常执行....</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 <code>A</code> 分别注册了两个 <code>defer</code> 函数 <code>A1和A2</code>。因为此阶段是注册阶段，所以并不会去执行函数。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L6iaibdGLYroCCtK18JQJIyoLiaIufmKESlvBcXok7QzHA5o9Omz0HQ93od3eOa7bibn3f5fvKtLXLKpA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>执行 <code>deferreturn</code>，会先判断 <code>defer</code> 链表上的 <code>defer</code> 是不是函数 <code>A</code> 注册的。判断的方法时通过判断 <code>_defer</code> 结构体记录的 <code>sp</code> 是否等于 <code>A</code> 的栈指针。<code>A2</code> 是函数 <code>A</code> 注册的，保存 <code>defer</code> 函数调用的相关信息，然后这一项从 <code>defer</code> 链表中移除，当 <code>A2</code> 执行时候，又会注册两个 <code>defer</code> 函数 <code>B1和B2</code>。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L6iaibdGLYroCCtK18JQJIyoLGzXxICrqXdV3JZ6lzWUx5bRBXtr8zAzeY7pbZjXTBBIMuhSUibFpMoA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>A2</code> 函数结束前会执行 <code>defer</code> 链表，同时也会去判断是否是自己注册的链表。<code>B2</code> 执行，然后 <code>B1</code> 执行，其实此时 <code>A2</code> 不知道自己注册的链表是否已经执行完了。那么什么时候会判断 <code>A2</code> 结束了。直到出现 下一个 <code>_defer.sp</code> 不等于 <code>A2</code> 的栈指针即遇到不属于自己注册的 <code>defer</code> 函数代表 <code>A2</code> 注册的 <code>defer</code> 执行完了。</p><p>这里又判断到 <code>A1</code> 是函数 <code>A</code> 注册的 <code>defer</code> 函数，又会回到 <code>A</code> 的<code>defer</code> 执行流程。<code>A1</code> 执行完后，链表为空，此时函数 <code>A</code> 结束。</p><blockquote><p><em>理解了defer注册与执行的逻辑，再配合之前介绍过的Function Value、函数调用栈等内容，就很容易理解上面几个例子，也就不用刷那些重复的defer面试题了</em></p></blockquote><h2 id="似乎-defer1-12-有点慢" tabindex="-1"><a class="header-anchor" href="#似乎-defer1-12-有点慢" aria-hidden="true">#</a> 似乎 defer1.12 有点慢</h2><p>因为 <code>defer</code> 真的很方便，所以大家都已经习惯了随手使用它。但是与一般的函数调用比起来，<code>defer1.12</code> 的实现方式会在调用时造成较大的额外开销，尤其是在锁释放这种场景。因此经常被一些库设计者所诟病，甚至有些项目的注释中写明了不用 <code>defer</code> 能节省多少多少纳秒。</p><p><code>defer1.12</code> 的性能问题主要缘于两个方面：</p><ol><li><code>_defer</code> 结构体堆分配，即使有预分配的 <code>deferpool</code>，也需要去堆上获取与释放。而且 <code>defer</code> 函数的参数还要**在注册时从栈拷贝到堆，执行时又要从堆拷贝到栈。**这样左右拷贝，又怎会不慢呢？</li><li><code>defer</code> 信息保存到链表，而<strong>链表操作比较慢。</strong></li></ol><p>但是，<code>defer</code> 作为一个关键的语言特性，怎能如此受人诟病？所以 <code>GO</code> 语言在 1.13 和1.14 中做出了不同的优化。</p><h2 id="defer1-13" tabindex="-1"><a class="header-anchor" href="#defer1-13" aria-hidden="true">#</a> defer1.13</h2><p>我们来看看 <code>defer1.13</code> 到底升级了啥？</p><p><code>Go1.13</code> 中 <code>defer</code> 性能的优化点，主要集中在减少 <code>defer</code> 结构体堆分配。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A1</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//1</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
	<span class="token keyword">defer</span> <span class="token function">A1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

	a <span class="token operator">=</span> a <span class="token operator">+</span> b
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//3,2</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer1.13</code> 编译后的伪指令是这样的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> d <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        runtime<span class="token punctuation">.</span>_defer
        i <span class="token builtin">int</span>
    <span class="token punctuation">}</span>
    d<span class="token punctuation">.</span>siz <span class="token operator">=</span> <span class="token number">0</span>
    d<span class="token punctuation">.</span>fn <span class="token operator">=</span> A1
    d<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">10</span>
    r <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">deferprocStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">.</span>_defer<span class="token punctuation">)</span>
    <span class="token keyword">if</span> r <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">goto</span> ret
    <span class="token punctuation">}</span>
    <span class="token comment">// code to do something</span>
    a <span class="token operator">=</span> a <span class="token operator">+</span> b
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//3,2</span>
    
    runtime<span class="token punctuation">.</span><span class="token function">deferreturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
ret<span class="token punctuation">:</span>
    runtime<span class="token punctuation">.</span><span class="token function">deferreturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现好像和 <code>defer 1.12</code> 做了很大的改变。</p><table><thead><tr><th>结构</th><th>defer1.12</th><th>defer1.13</th></tr></thead><tbody><tr><td>_defer 的位置</td><td>当执行 deferproc 函数时候会在堆上开辟一段空间专门存储 _defer 结构体</td><td>会在函数调用栈直接分配空间存储 defer 结构体相关字段。</td></tr><tr><td>参数</td><td>会存储在 _defer 结构体后面的空间，使用时候需要从堆上拷贝到函数调用栈</td><td>参数则存储在函数的局部变量空间。使用时候从栈上拷贝变量到参数空间</td></tr><tr><td>_defer 结构体添加到 defer 链表</td><td>当堆上存储 _defer 结构体后，就会将结构体分配添加到链表头上。</td><td>runtime.deferprocStack 则会把栈上分配的_defer 结构体注册到 defer 链表</td></tr></tbody></table><p>从上面伪指令，你会发现多了一个结构体 d，它由两部分组成分别是 <code>runtime._defer</code> 结构体，传给 <code>defer</code> 函数 <code>A1</code> 的参数。</p><p>值得注意的是，1.13 版本并不是所有的 defer 都能够在栈上进行分配空间。循环中的 <code>defer</code>，无论是显示的 <code>for</code> 循环，还是 <code>goto</code> 形成的隐式循环，都只能使用 <code>1.12</code> 版本中的处理方式在<strong>堆上分配</strong>。即使只执行一次的 <code>for</code> 循环也是一样。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//显示循环</span>
<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token function">B</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span><span class="token operator">...</span>

<span class="token comment">//隐式循环</span>
again<span class="token punctuation">:</span>
    <span class="token keyword">defer</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> i<span class="token operator">&lt;</span>n <span class="token punctuation">{</span>
        n<span class="token operator">++</span>
        <span class="token keyword">goto</span> again
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以为了区分 <code>_defer</code> 结构体存储的位置，在 <code>defer1.13</code> 中，<code>runtime._defer</code> 结构体增加了一个字段 <strong>heap</strong>，用于标识是否为堆分配。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    siz       <span class="token builtin">int32</span> <span class="token comment">//deferproc第一个参数传入，就是defer函数参数加返回值的总大小。</span>
    started   <span class="token builtin">bool</span> <span class="token comment">//标识defer函数是否已经开始执行；</span>
    heap      <span class="token builtin">bool</span>       <span class="token comment">//标识是否为堆分配</span>
    sp        <span class="token builtin">uintptr</span> <span class="token comment">// sp at time of defer 就是注册defer函数的函数栈指针；</span>
    pc        <span class="token builtin">uintptr</span> <span class="token comment">//是deferproc函数返回后要继续执行的指令地址；</span>
    fn        <span class="token operator">*</span>funcval <span class="token comment">//由deferproc的第二个参数传入，也就是被注册的defer函数；</span>
    _panic    <span class="token operator">*</span>_panic <span class="token comment">// panic that is running defer 是触发defer函数执行的panic指针，正常流程执行defer时它就是nil；</span>
    link      <span class="token operator">*</span>_defer <span class="token comment">//自然是链到之前注册的那个_defer结构体。</span>
 <span class="token punctuation">}</span>
<span class="token comment">//参数和返回值这段空间会直接分配在_defer结构体后面，用于在注册时保存给defer函数传入的参数，并在执行时直接拷贝到defer函数的调用者栈上。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer</code> 函数执行在 <code>1.13</code> 中没有变化，依旧通过 <code>deferreturn</code> 实现，这一次的 <code>_defer</code> 结构体后面的参数和返回值空间，不是从堆拷贝到栈上，而是从栈上的局部变量空间拷贝到参数空间，<code>defer</code> 函数通过相对寻址找到参数。</p><p><code>1.13</code> 版本的 <code>defer</code> 主要通过减少了 <code>_defer</code> 结构体的堆分配，达到了性能优化在 <code>30%</code> 左右。好像只解决了第一个问题，仍然在使用 <code>defer</code> 链表。在 <code>1.14</code> 版本又会又怎么样的优化呢？</p><h2 id="defer1-14" tabindex="-1"><a class="header-anchor" href="#defer1-14" aria-hidden="true">#</a> defer1.14</h2><p>我们举一个例子看看到底做了怎么样的优化呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token function">A1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">defer</span> <span class="token function">A2</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eggo&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// code to do something</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A2</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义的伪指令会是怎么样的。(以 <code>defer</code> 函数 <code>A1</code> 为例)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i
    <span class="token comment">//......</span>
        
    A1（a<span class="token punctuation">,</span> b）
    <span class="token keyword">return</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>结构</th><th>defer1.12</th><th>defer1.13</th><th>defer 1.14</th></tr></thead><tbody><tr><td>_defer 的位置</td><td>当执行 deferproc 函数时候会在堆上开辟一段空间专门存储 _defer 结构体</td><td>会在函数调用栈直接分配空间存储 defer 结构体相关字段。</td><td>没有_defer 结构体了</td></tr><tr><td>参数</td><td>会存储在 _defer 结构体后面的空间，使用时候需要从堆上拷贝到函数调用栈</td><td>参数则存储在函数的局部变量空间。使用时候从栈上拷贝变量到参数空间</td><td>会提前定义并分配到函数调用栈局部变量上</td></tr><tr><td>_defer 结构体添加到 defer 链表</td><td>当堆上存储 _defer 结构体后，就会将结构体分配添加到链表头上。</td><td>runtime.deferprocStack 则会把栈上分配的_defer 结构体注册到 defer 链表</td><td>没有_defer 链表了</td></tr><tr><td>defer 函数执行</td><td>利用 defer 链表找到 _defer 结构体然后找到函数入口地址 ，进行调用。</td><td>与 defer 1.12 一致</td><td>会将执行函数置于函数 A 前，当作普通函数调用。</td></tr></tbody></table><p>通过 <code>defer1.14</code> 这样的方式有以下几个优点：</p><ul><li>不用构建 <code>_defer</code> 结构体</li><li>用不到 <code>defer</code> 链表</li></ul><p>但是好像这样的逻辑怎么用到 <code>defer</code> 函数 <code>A2</code> 呢？怎么判断我应不应该调用这个函数呢？</p><p><code>defer1.14</code> 通过增加一个标识变量 <code>df</code> 来解决这个问题。<code>df</code> 变量每一位对应当前函数的一个 <code>defer</code> 函数是否执行。</p><p>函数 <code>A1</code> 需要被执行，那么 df|=1 方式将 <code>df</code> 第一位置为1，然后函数结束前通过判断 <code>df</code> 的第一位是否为 1，来决定是否执行。这样的逻辑对于函数 <code>A2</code> 也适用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> df <span class="token builtin">byte</span>
    <span class="token comment">//A1的参数</span>
    <span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i
    df <span class="token operator">|=</span> <span class="token number">1</span>

    <span class="token comment">//A2的参数</span>
    <span class="token keyword">var</span> m<span class="token punctuation">,</span>n <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eggo&quot;</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        df <span class="token operator">|=</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//code to do something</span>
        
    <span class="token comment">//判断A2是否要调用</span>
    <span class="token keyword">if</span> df<span class="token operator">&amp;</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        df <span class="token operator">=</span> df<span class="token operator">&amp;^</span><span class="token number">2</span>
        <span class="token function">A2</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//判断A1是否要调用</span>
    <span class="token keyword">if</span> df<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        df <span class="token operator">=</span> df<span class="token operator">&amp;^</span><span class="token number">1</span>
        <span class="token function">A1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
    <span class="token comment">//省略部分与recover相关的逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Go1.14</code> 把 <code>defer</code> 函数在当前函数内展开并直接调用，这种方式被称为 open coded defer。这种方式不仅不用创建 <code>_defer</code> 结构体，也脱离了 <code>defer</code> 链表的束缚。不过这种方式依然不适用于循环中的 <code>defer</code>，所以 <code>1.12</code> 版本 <code>defer</code> 的处理方式是一直保留的。</p><h2 id="defer-提升后带来的后果" tabindex="-1"><a class="header-anchor" href="#defer-提升后带来的后果" aria-hidden="true">#</a> defer 提升后带来的后果</h2><p>我们一直讨论的是程序正常执行 defer 的处理逻辑，那么如果程序不正常执行了呢，发生了 <code>panic</code> 或者使用了 <code>untime.Goexit</code> 函数，当前的正常程序反而会不执行，而是去执行 <code>defer</code> 链表，可是在 <code>1.14</code> 版本里面并没有注册链表啊。</p><p><code>defer1.14</code> 版本的 <code>_defer</code> 结构体又增加了几个字段，使那些没有注册到链表的 <code>defer</code> 函数通过栈扫描来注册到链表里。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> _defer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    siz       <span class="token builtin">int32</span>
    started   <span class="token builtin">bool</span>
    heap      <span class="token builtin">bool</span>
    openDefer <span class="token builtin">bool</span>           <span class="token comment">//1</span>
    sp        <span class="token builtin">uintptr</span>
    pc        <span class="token builtin">uintptr</span>
    fn        <span class="token operator">*</span>funcval
    _panic    <span class="token operator">*</span>_panic
    link      <span class="token operator">*</span>_defer 
    fd        unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//2</span>
    varp      <span class="token builtin">uintptr</span>        <span class="token comment">//3</span>
    framepc   <span class="token builtin">uintptr</span>        <span class="token comment">//4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可是这样会导致 <code>defer</code> 确实变快了，但是 <code>panic</code> 却变慢了。</p><p>我们后面看看 <code>panic</code> 又会有怎么样的优化呢？</p>`,98);function k(m,v){const a=o("ExternalLinkIcon");return c(),p("div",null,[l,n("blockquote",null,[n("p",null,[s("推荐阅读："),n("a",u,[s("【Golang】脱胎换骨的defer"),t(a)])])]),r])}const g=e(i,[["render",k],["__file","13.defer.html.vue"]]);export{g as default};
