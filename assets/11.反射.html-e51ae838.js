import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as s,f as c,d as i}from"./app-12e502b6.js";const l={},u=n("h1",{id:"反射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#反射","aria-hidden":"true"},"#"),s(" 反射")],-1),d={href:"https://mp.weixin.qq.com/s?__biz=Mzg5NjIwNzIxNQ==&mid=2247484172&idx=1&sn=06299f7bb8751e41d0395e565a919878&chksm=c005d30cf7725a1a8a3c7c6aade78b5041b8556b334994f737c88857959b625f844f5f9f76dd&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},r=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>用到反射的场景不多，一般是变量类型不确定，内部结构不明朗的情况，反正我现在一次都没有用过，但是不妨碍我们来看看底层到底是怎么回事。</p><p><code>reflect</code> 有两个核心类型：<code>reflect.Type</code> 和 <code>reflect.Value</code>。他们撑起了反射功能的基本框架。</p><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> Type</h2><p><code>reflect.Type</code> 是一个接口类型，定义了一系列方法获取类型各方面的信息。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Type <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Align</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token comment">//对齐边界</span>
    <span class="token function">FieldAlign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token comment">//作为结构体字段的对齐边界</span>
    <span class="token function">Method</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> Method <span class="token comment">//获取方法数组中第i个Method</span>
    <span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Method<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token comment">//按照名称查找方法</span>
    <span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token comment">//方法列表中可导出方法的数目</span>
    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token comment">//类型名称</span>
    <span class="token function">PkgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token comment">//包路径</span>
    <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span> <span class="token comment">//该类型变量占用字节数</span>
    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token comment">//获取类型的字符串表示</span>
    <span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Kind <span class="token comment">//类型对应的reflect.Kind</span>
    <span class="token function">Implements</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">//该类型是否实现了接口u</span>
    <span class="token function">AssignableTo</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">//是否可以赋值给类型u</span>
    <span class="token function">ConvertibleTo</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">//是否可转换为类型u</span>
    <span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">//是否可比较</span>

    <span class="token comment">//只能应用于某些Kind的方法</span>
    <span class="token comment">//Int*, Uint*, Float*, Complex*: </span>
    <span class="token function">Bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

    <span class="token comment">//Array,Ptr,Slice,Map: </span>
    <span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Type
    <span class="token comment">//Array</span>
    <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
        
    <span class="token comment">//Chan:ChanDir, Elem </span>
    <span class="token function">ChanDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ChanDir

    <span class="token comment">//Func: </span>
    <span class="token function">In</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Type
    <span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
    <span class="token function">Out</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Type
    <span class="token function">NumOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
    <span class="token function">IsVariadic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

    <span class="token comment">//Map: </span>
    <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Type

    <span class="token comment">//Struct: </span>
    <span class="token function">Field</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> StructField
    <span class="token function">FieldByIndex</span><span class="token punctuation">(</span>index <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> StructField
    <span class="token function">FieldByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>StructField<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
    <span class="token function">FieldByNameFunc</span><span class="token punctuation">(</span>match <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>StructField<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>  
    <span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

    <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>rtype
    <span class="token function">uncommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>uncommonType
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通常会用 <code>reflect.TypeOf</code> 这个函数去拿到 <code>reflect.Type</code> 类型的返回值、</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// TypeOf 返回表示 i 的动态类型的反射类型。如果 i 是一个 nil 接口值，则 TypeOf 返回 nil。</span>
<span class="token keyword">func</span> <span class="token function">TypeOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Type <span class="token punctuation">{</span>
	eface <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>emptyInterface<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">toType</span><span class="token punctuation">(</span>eface<span class="token punctuation">.</span>typ<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子🌰：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	a<span class="token operator">:=</span><span class="token string">&quot;eggo&quot;</span>
	t<span class="token operator">:=</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要反射 <code>int</code> 类型的变量 <code>a</code>。</p><p>我们依旧从函数调用栈开始分析，<code>main</code> 函数栈帧中有两个局部变量 <code>t</code> 与 <code>a</code>，然后是返回值空间，最后是参数。我们知道 <code>Go</code> 语言中参数都是值拷贝。难道这里参数是拷贝变量 <code>a</code> 的值吗？不行，<code>TypeOf</code> 函数的参数类型是空接口。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    _type <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据 </span>
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//指向接口的动态值。 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_type</code> 字段接受的是 <code>a</code> 的动态类型，<code>data</code> 接受的是 <code>a</code> 的地址。</p><p><strong>拷贝不了值，那拷贝变量 <code>a</code> 的地址？<strong>也不行，因为这样并不符合</strong><code>Go</code> 语言中传参值拷贝</strong>的语义，无论对参数做怎么样的修改，都不能作用到局部变量。</p><p>**既然拷贝不了值，也不能拷贝值，那应该怎么办？**实际上在编译阶段会增加一个临时变量作为 a 的拷贝值（copy of a），再把这个临时变量的地址传递给函数使用，这样无论函数对参数做怎么样的修改，都不会作用到局部变量 a。既满足了空接口类型的参数也符合传参值拷贝的语义。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L4H10TIVbNxnHRlUuh0icCFIFTLSBz1kfJ5uicMXqhEPv7S5VZR6Mqe39QWiceGfzicBMuwGfIEMSH46g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>当参数是空接口情况，都是通过传递拷贝后变量的地址来实现传值的语义。</strong></p><p>接下来，<code>reflect.TypeOf</code> 函数会把 <code>runtime.eface</code> 类型的参数 <code>i</code> 转化成 <code>reflect.emptInterface</code> 类型并赋给变量 <code>eface</code>，转换以后方便 <code>reflect</code> 包操作内部元素。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// emptyInterface 是 interface{} 值的标头。</span>
<span class="token keyword">type</span> emptyInterface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	typ  <span class="token operator">*</span>rtype <span class="token comment">//string</span>
	word unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//-&gt;i.data</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>*rtype</code> 实现了 <code>reflect.Type</code> 接口，<code>TypeOf</code> 函数要做的就是把 <code>eface</code> 的 <code>typ</code> 字段取出来，包装成 <code>reflect.Type</code> 类型的返回值就可以了，那么这就是 <code>toType</code> 函数干的活</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">toType</span><span class="token punctuation">(</span>t <span class="token operator">*</span>rtype<span class="token punctuation">)</span> Type <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
<span class="token comment">//上面的代码可以等价于</span>
<span class="token keyword">var</span> ret reflect<span class="token punctuation">.</span>Type
ret <span class="token operator">=</span> eface<span class="token punctuation">.</span>typ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reflect.Type</code> 既然是一个非空接口，那么他的结构如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> iface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    tab   <span class="token operator">*</span>itab
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//接口的动态值 -&gt;eface.typ</span>
<span class="token punctuation">}</span>
<span class="token comment">//itab</span>
<span class="token keyword">type</span> itab <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    inter  <span class="token operator">*</span>interfacetype <span class="token comment">//接口的类型元数据  -&gt;reflect.Type</span>
    _type  <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据 -&gt;*rtype</span>
    hash   <span class="token builtin">uint32</span> <span class="token comment">//itab._type中拷贝来的，类型哈希值</span>
    <span class="token boolean">_</span>      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
    fun    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span> <span class="token comment">//动态类型实现的接口要求方法地址 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么最后返回值的结构就与 <code>iface</code> 结构差不多，<code>tab</code> 指向 <code>&lt;reflect.Type，*rtype&gt;</code> 对应的 <code>itab</code> 指针，<code>data</code> 则是变量 <code>a</code> 的地址。</p><p>接下来通过非空接口类型 <code>t</code> 去调用各种方法都会去 <code>string</code> 类型查找相关数据。</p><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> Value</h2><p><code>reflect.Value</code> 是一个结构体类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Value <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    typ <span class="token operator">*</span>rtype <span class="token comment">//存储反射变量的类型元数据指针</span>
    ptr unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//存储数据地址</span>
    flag <span class="token comment">//是一个位标识符，存储反射变量值的一些描述信息，例如类型掩码，是否为指针，是否为方法，是否只读等等</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看反射是如何更新变量值的！</p><p>举个例子🌰：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	a <span class="token operator">:=</span> <span class="token string">&quot;eggo&quot;</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;new eggo&quot;</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">//panic: reflect: reflect.Value.SetString using unaddressable value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看 <code>reflect.ValueOf</code> 函数是怎么样的！</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ValueOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">escapes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token function">unpackEface</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">escapes</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> dummy<span class="token punctuation">.</span>b <span class="token punctuation">{</span>
		dummy<span class="token punctuation">.</span>x <span class="token operator">=</span> x
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他的参数是空接口类型，所以接受的参数数据是变量 <code>a</code> 的拷贝值地址。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    _type <span class="token operator">*</span>_type <span class="token comment">//指向接口的动态类型元数据  -&gt;stringtype</span>
    data  unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//指向接口的动态值。  -&gt;&amp;(copy of a)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据代码注释，<code>escapes</code> 函数会把参数 <code>i</code> 指向得变量（变量 <code>a</code> 得拷贝值 <code>copy of a</code>）逃逸到堆上，那么栈上只会留下他（<code>copy of a</code>）的地址。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L4H10TIVbNxnHRlUuh0icCFIFEQaAmVKibOx4FpMYRu8tMdMziay6s3xiaaWG4jDSMdwzG4b3OIMPKsMQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">unpackEface</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	e <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyInterface<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// NOTE: don&#39;t read e.word until we know whether it is really a pointer or not.</span>
	t <span class="token operator">:=</span> e<span class="token punctuation">.</span>typ
	<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	f <span class="token operator">:=</span> <span class="token function">flag</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">ifaceIndir</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		f <span class="token operator">|=</span> flagIndir
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Value<span class="token punctuation">{</span>t<span class="token punctuation">,</span> e<span class="token punctuation">.</span>word<span class="token punctuation">,</span> f<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单看这个函数逻辑。<code>ValueOf</code> 函数的返回值是 <code>reflect.Value</code> 类型，返回值结构如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Value <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    typ <span class="token operator">*</span>rtype <span class="token comment">//存储反射变量的类型元数据指针  -&gt;就是参数的 _type</span>
    ptr unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//存储数据地址 -&gt;&amp;(copy of a) 根据 unpackEface 来看它来自于 emptyInterface.word 再往前看 其实来自于 参数的 data 字段</span>
    flag <span class="token comment">//是一个位标识符，存储反射变量值的一些描述信息，例如类型掩码，是否为指针，是否为方法，是否只读等等</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个返回值会被赋值给局部变量 <code>v</code>，调用 <code>SetString</code> 。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">SetString</span><span class="token punctuation">(</span>x <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	v<span class="token punctuation">.</span><span class="token function">mustBeAssignable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">mustBe</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span> <span class="token operator">=</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SetString</code> 函数会用到 <code>Value</code> 类型的 <code>ptr</code> 字段。但是经过返回值赋值局部变量 <code>v</code> 他的字段 <code>ptr</code> 好像指向的是 <code>&amp;(copy of a)</code>，这是临时变量的地址，不能修改的。所以就会报错。</p><p>因为修改这样一个连用户都不知道的临时变量是没有任何意义，同时我们的本意是要修改局部变量 <code>a</code>，所以就会发生 <code>panic</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token builtin">panic</span><span class="token punctuation">:</span> reflect<span class="token punctuation">:</span> reflect<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>SetString using unaddressable value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好像这样子去修改不符合要求啊！</p><p>我们回忆一下，为什么会发生 <code>panic</code>？我们从后面一步一步理一下，失败原因。</p><ul><li>v 的字段 ptr 指向是 <code>&amp;(copy of a)</code></li><li>为什么会有这个 <code>&amp;(copy of a)</code>？因为传参传的是局部变量 <code>a</code>，为了满足语义。</li></ul><p>我们现在明白了，要想去修改变量 <code>a</code>，需要反射 <code>a</code> 的指针，只有这样 <code>ptr</code> 才会指向 <code>&amp;a</code>。</p><p>举个例子🌰：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">:=</span> <span class="token string">&quot;eggo&quot;</span>
    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
    v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;new eggo&quot;</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里传参依旧是值拷贝，这次拷贝 <code>a</code> 的地址，<code>escapes</code> 会将参数指向的变量 <code>a</code> 逃逸到堆上，那么栈上只存他的地址 <code>&amp;a</code>。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/ibjI8pEWI9L4H10TIVbNxnHRlUuh0icCFIdPficCgTms7VHL5wdicbKqSjtevM1Jc0rs9pFTvr1ejgLpqfXnbqNwQg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>剩余的部分与上面那个例子类似，就不过多的描述了，我们来看看不同的地方。</p><p>通过调用 <code>v.Elem()</code> 方法然后，再调用的的 <code>SetString</code> 方法就可以修改原来的变量 <code>a</code>了。</p><blockquote><p>为什么一定要先调用 <code>Elem</code> 拿到 <code>ptr</code> 再去修改值呢？</p><p>这个暂时不知道</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span>
	k <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> k <span class="token punctuation">{</span>
	<span class="token keyword">case</span> Interface<span class="token punctuation">:</span>
		<span class="token keyword">var</span> eface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">if</span> v<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			eface <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			eface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">interface</span> <span class="token punctuation">{</span>
				<span class="token function">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		x <span class="token operator">:=</span> <span class="token function">unpackEface</span><span class="token punctuation">(</span>eface<span class="token punctuation">)</span>
		<span class="token keyword">if</span> x<span class="token punctuation">.</span>flag <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			x<span class="token punctuation">.</span>flag <span class="token operator">|=</span> v<span class="token punctuation">.</span>flag<span class="token punctuation">.</span><span class="token function">ro</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> x
	<span class="token keyword">case</span> Ptr<span class="token punctuation">:</span>
		ptr <span class="token operator">:=</span> v<span class="token punctuation">.</span>ptr
		<span class="token keyword">if</span> v<span class="token punctuation">.</span>flag<span class="token operator">&amp;</span>flagIndir <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			ptr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// The returned value&#39;s address is v&#39;s value.</span>
		<span class="token keyword">if</span> ptr <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		tt <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptrType<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>typ<span class="token punctuation">)</span><span class="token punctuation">)</span>
		typ <span class="token operator">:=</span> tt<span class="token punctuation">.</span>elem
		fl <span class="token operator">:=</span> v<span class="token punctuation">.</span>flag<span class="token operator">&amp;</span>flagRO <span class="token operator">|</span> flagIndir <span class="token operator">|</span> flagAddr
		fl <span class="token operator">|=</span> <span class="token function">flag</span><span class="token punctuation">(</span>typ<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> Value<span class="token punctuation">{</span>typ<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> fl<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ValueError<span class="token punctuation">{</span><span class="token string">&quot;reflect.Value.Elem&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">SetString</span><span class="token punctuation">(</span>x <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	v<span class="token punctuation">.</span><span class="token function">mustBeAssignable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">mustBe</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span> <span class="token operator">=</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,59);function k(v,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[s("推荐学习："),n("a",d,[s("【Golang】图解反射"),c(a)])])]),r])}const g=t(l,[["render",k],["__file","11.反射.html.vue"]]);export{g as default};
