import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as i,a as n,b as a,f as e,d as c}from"./app-12e502b6.js";const l={},d=c(`<h1 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h1><h2 id="map概要" tabindex="-1"><a class="header-anchor" href="#map概要" aria-hidden="true">#</a> map概要</h2><p>Go语言中map是散列表的引用。散列表可以用来存储键值对元素。</p><p>map类型是map[k]v，其中k是字典的键，v是字典中值对应的数据类型。</p><blockquote><p>💡:k的类型必须是可以通过操作符==来进行比较的数据类型。v的类型则没有限制。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>map类型的变量本质上是个指针，这些键值对实际上是通过哈希表来存储的。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029195933.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><blockquote><p>❓：为什么要用哈希表？</p></blockquote><p>能够存储键值对的数据结构有很多种，可以是数组，也可以是链表，但是能用不代表好用。如果每次查找一个键都要从第一个元素开始遍历，直到发现匹配的键或者遍历完所有元素，这样的时间复杂度就是O(n)。</p><p>散列表的集合，键值是唯一的，键对应的值可以通过键来获取，更新或者删除。这些操作基本上通过常量时间键的比较来完成，时间复杂度就是O(1)</p><h2 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> Hashmap</h2><h3 id="建表" tabindex="-1"><a class="header-anchor" href="#建表" aria-hidden="true">#</a> 建表</h3><p>哈希表通常会有一堆桶(<code>bucket</code>)来存储键值对。现在有一个键值对<code>{k,v}</code> ，那么怎么选桶？通过hash函数将k转换成hash值，通过hash从桶的编号进行选择，从而通过<code>array[hash[key]]</code>实现O(1)的查找效率。</p><p>这里有两种方式比较常用</p><ol><li>取模运算 <code>hash%m</code>（通过hash值与桶的个数进行取模得到编号）</li><li>按位与运算 <code> hash&amp;(m-1)</code> (hash值与m-1进行与运算)</li></ol><p>第二种更加高效，但是有一定的限制。</p><blockquote><p>❗：m必须要是2的整数次幂这样才能保证与运算结果落在[0,m-1]，而不会出现有些桶注定不会被选中的情况。</p><p>当m是5，他的二进制数为<code>101</code> 那么m-1的二进制数为<code>100</code> ，无论什么数与m-1进行与运算，后面两位都是0，就会出现编号[1,3]的桶注定不会被选中的情况。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211028143534.png" alt="image-20211028143533945" tabindex="0" loading="lazy"><figcaption>image-20211028143533945</figcaption></figure></blockquote><p>哈希函数的实现有很多，其目的都是让哈希结果能够尽可能的均匀分布在<code>0~length(array)</code>间。</p><p>一个完美的哈希函数就是将<code>key</code>和<code>index</code>一 一对应；时间复杂度为O(1)</p><p>一个极坏的哈希函数就是将所有的<code>key</code>都映射到一个<code>index</code>上。可能达到的时间复杂度为O(n)</p><h3 id="哈希冲突" tabindex="-1"><a class="header-anchor" href="#哈希冲突" aria-hidden="true">#</a> 哈希冲突</h3><p>当我们再次存一个键值对<code>{k2,v2}</code>时候他的哈希值通过哈希函数得到桶的编号，桶里面已经有存储了一个键值对。这就是哈希冲突。在通常情况下，哈希函数输入的范围一定会远远大于输出的范围，所以在使用哈希表时一定会遇到冲突。<strong>通常有两个思路来解决。</strong></p><blockquote><p>第一种：开放地址法</p></blockquote><p>假设此时需要存储的键值对<code>{k2,v2}</code>对应的桶编号1已经被占用了，那么就用下一个空闲桶编号3来存键值对。</p><p>当查找<code>k2</code>时候，根据哈希函数定位到编号为1的桶，但是通过比较发现key不对，那么就会继续检测下一个桶，直到匹配成功或者遇到空桶就代表key不存在。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200029.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><blockquote><p>第二种：拉链法（go的map就是利用这种方式解决）</p></blockquote><p>假设此时需要存储的键值对<code>{k2,v2}</code>对应的桶编号1已经被占用了，那么就在编号为1的桶后面链接一个桶存储键值对。此时的编号1的桶还要额外记录一个指针，指向连在一起桶。</p><p>当查找<code>k2</code>时候，根据哈希函数定位到编号为1的桶，但是通过比较发现key不对，就会通过指针去查询，通过比较key的值来锁定键值对。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200111.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><blockquote><p>❗：如果哈希函数可以很均匀的把key映射到各个桶里，发生哈希冲突的几率就会降低。哈希冲突会影响哈希读写的效率，适当的对哈希表的扩容也是一个保障读写效率的手段之一。</p></blockquote><h3 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容" aria-hidden="true">#</a> 扩容</h3><p>关于扩容，我们要搞清楚两点：</p><ul><li>何时扩容？</li><li>怎么扩容？</li></ul><blockquote><p>何时扩容？</p></blockquote><p>哈希表中存储的键值对数量和桶数量的比值会作为判断哈希表是否需要扩容的依据，这个依据叫做<strong>负载因子</strong>（Load Factor）通常需要设定一个触发扩容的最大负载因子。</p><p><code>loadFactor = keyCount / bucketCount</code></p><blockquote><p>怎么扩容？</p></blockquote><p>需要扩容时候，就会分配更多的桶作为新桶，此时需要把旧桶的值都迁移到新桶中，如果一次性把所有键值对挪到新的桶里，那么对于键值对数量很多情况，每次扩容占用的时间太长就会造成性能瞬时明显抖动，所以通常会选择**“渐进式扩容”**。</p><p>一个字段（oldbuckets ）记录旧桶的位置，一个字段（nevacuate ）记录旧桶迁移的进度。当需要扩容时候，会分配足够多的新桶，在每次哈希表读写操作，检测当当前处于迁移阶段，就迁移一部分键值对到新桶里，直到所有数据迁移成功。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200131.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="go中的map" tabindex="-1"><a class="header-anchor" href="#go中的map" aria-hidden="true">#</a> Go中的map</h2><p>map类型的变量本质上是一个hmap类型的指针：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    count     <span class="token builtin">int</span>    <span class="token comment">//已经存储的键值对个数</span>
    flags     <span class="token builtin">uint8</span>
    B         <span class="token builtin">uint8</span>  <span class="token comment">// 常规桶个数等于2^B,选择桶用的是与运算</span>
    noverflow <span class="token builtin">uint16</span> <span class="token comment">// 使用的溢出桶数量</span>
    hash0     <span class="token builtin">uint32</span> <span class="token comment">// hash seed</span>
    buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 常规桶起始地址</span>
    oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 扩容时保存原来常规桶的地址</span>
    nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">// 渐进式扩容时记录下一个要被迁移的旧桶编号</span>

    extra <span class="token operator">*</span>mapextra <span class="token comment">//里面记录的都是溢出桶相关的信息：</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bmap" tabindex="-1"><a class="header-anchor" href="#bmap" aria-hidden="true">#</a> bmap</h3><p><code>map</code>使用的桶很有设计感，每个桶里可以存储8个键值对，并且为了内存使用更加紧凑，8个键放一起，8个值放一起。对应每个<code>key</code>只保存其哈希值的高8位（<code>tophash</code>）。而每个键值对的<code>tophash</code>、<code>key</code>和<code>value</code>的索引顺序一一对应。这就是<code>map</code>使用的桶的内存布局。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029195952.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>既然每个桶里可以存储8个元素，那存满了怎么办？扩容的代价还是比较高的，所以为了减少扩容次数，这里引入了<strong>溢出桶(overflow)</strong>。溢出桶的内存布局与之前介绍的<strong>常规桶</strong>相同。如果哈希表要分配的桶的数目大于2<sup>4，就会预分配2</sup>(B-4)个溢出桶备用。这些常规桶和溢出桶在内存中是连续的，只是前2^B个用作常规桶，后面的用作溢出桶。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//溢出桶相关的信息</span>
<span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    overflow    <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap <span class="token comment">//把已经用到的溢出桶链起来</span>
    oldoverflow <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap <span class="token comment">//渐进式扩容时，保存旧桶用到的溢出桶</span>
    nextOverflow <span class="token operator">*</span>bmap   <span class="token comment">//下一个尚未使用的溢出桶</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200142.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如果当前桶存满了以后，检查<code>hmap.extra.nextoverflow</code>，如果还有可用的溢出桶，就在这个桶后面链上这个溢出桶，然后继续往这个溢出桶里存。而<code>hmap.extra.nextoverflow</code>继续指向下一个空闲的溢出桶。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200150.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如果我们把哈希表的桶存满了，那么现在再继续存储键值对，那么这个哈希表会创建溢出桶还是发生扩容呢？</p><h3 id="扩容规则" tabindex="-1"><a class="header-anchor" href="#扩容规则" aria-hidden="true">#</a> 扩容规则</h3><blockquote><p>翻倍扩容</p></blockquote><p>go语言中<code>map</code>负载因子默认是<code>6.5</code>，当比值超过负载因子就会触发<strong>翻倍扩容</strong>。</p><p><code> hmap.count / 2^hmap.B &gt; 6.5</code></p><p>分配新桶数目是旧桶的2倍，<code>hmap.oldbuckets</code>指向旧桶，<code>hmap.buckets</code>指向新桶。<code>hmap.nevacuate</code>为0，表示接下来要迁移编号为0的旧桶。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200157.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>例如：将旧桶数量记为m=4，新桶数量就是2m=8，如果一个哈希值选择0号旧桶：h&amp;(m-1)=0，那么h的二进制最低两位一定为0(<code>xxxxxx00</code>)，对于新桶，如果第三位是1的话，就去编号为4的桶，如果为0的话就去编号为0的桶。每个旧桶的键值对都会分流到两个新桶中。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200203.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>编号为<code>hmap.nevacuate</code>的旧桶迁移结束后会增加这个编号值，直到所有旧桶迁移完毕，把<code>hmap.oldbuckets</code>置为nil，一次翻倍扩容结束。</p><blockquote><p>等量扩容</p></blockquote><p>如果没有超过设置的负载因子上限，但是使用的溢出桶较多，也会触发扩容，不过这一次是<strong>等量扩容</strong>。</p><p><strong>第一个问题：用多少溢出桶算多？</strong></p><ol><li>如果常规桶数目不大于<code>2^15</code>，那么使用的溢出桶数目超过常规桶就算是多了；</li><li>如果常规桶数目大于<code>2^ 15</code>，那么使用溢出桶数目一旦超过<code>2^15</code>就算多了。</li></ol><p><strong>第二个问题：为什么要等量扩容？</strong></p><p>在很多键值对被删除的情况下，桶的负载因子没有超过上限值，却偏偏使用了很多溢出桶。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200217.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这种情况下，如果把这些键值对重新安排到等量的新桶中，虽然哈希值没变，常规桶数目没变，每个键值对还是会选择与旧桶一样的新桶编号，但是能够存储的更加紧凑，进而减少溢出桶的使用。</p><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200224.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><blockquote><ol><li>map每次遍历的顺序都是不同的。</li></ol></blockquote><p>为了防止开发人员依赖map的顺序，对于每一次map遍历（<code>range</code>），得到结果的顺序都是不同的，因为在初始化迭代器（<code>runtime.mapiterinit</code>）时都对<code>startBucket</code>和<code>startCell</code>进行了<code>random</code>操作。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mapiterinit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> it <span class="token operator">*</span>hiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>

   <span class="token comment">//some code ...</span>

   <span class="token comment">// decide where to start</span>

   r <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//fastrand 是一个快速生成随机数的函数</span>

   <span class="token keyword">if</span> h<span class="token punctuation">.</span>B <span class="token operator">&gt;</span> <span class="token number">31</span><span class="token operator">-</span>bucketCntBits <span class="token punctuation">{</span>

      r <span class="token operator">+=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span>

   <span class="token punctuation">}</span>

   it<span class="token punctuation">.</span>startBucket <span class="token operator">=</span> r <span class="token operator">&amp;</span> <span class="token function">bucketMask</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> 

   <span class="token comment">//bucketMask返回bucket的个数-1，也就是全1，将r和bucketMask做与操作，获得开始的桶编号</span>

   it<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> h<span class="token punctuation">.</span>B <span class="token operator">&amp;</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

   <span class="token comment">//bucketCnt是常量8代表一个桶内的cell数，将r右移B位后与7做与运算，可以获得开始的cell编号</span>

   <span class="token comment">//some code ...</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol start="2"><li>k的类型必须是可以通过操作符==来进行比较的数据类型</li></ol></blockquote><p>实<code>Go</code>语言中每种类型都有对应的类型元数据，类型元数据都有一个相同的<code>Header</code>，就是<code>runtime._type</code>。而在<code>_type.alg</code>这里记录了该类型的两个函数：<code>hash</code>和<code>equal</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> typeAlg <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    hash  <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span>
    equal <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/baici1/image-host/newimg/20211029200230.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>slice、function value、map是不可比较的(但是这三种类型都可以和nil进行对比)</p><blockquote><ol start="3"><li>不可寻址</li></ol></blockquote><p>正是因为扩容过程中会发生键值对迁移，键值对的地址也会发生改变，所以才说map的元素是<strong>不可寻址</strong>的，如果要取一个value的地址则<strong>不能通过编译</strong>。</p><blockquote><p>4.map不支持并发读写，只能并发读</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Go语言中的map通过<strong>与运算</strong>找桶的编号，发生<strong>哈希冲突</strong>时候，采用<strong>拉链法</strong>解决，当<strong>负载因子</strong>超过<code>6.5</code>时候，发生<strong>翻倍扩容</strong>，如果溢出桶数量过多，那么采用<strong>等量扩容</strong>。采用<strong>渐进式</strong>迁移旧桶键值对。</p><h2 id="使用注意" tabindex="-1"><a class="header-anchor" href="#使用注意" aria-hidden="true">#</a> 使用注意</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	find<span class="token operator">:=</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	find<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
	idx<span class="token operator">:=</span><span class="token number">0</span>
    <span class="token comment">//在这里的短变量声明，不会对 idx 进行赋值处理，而是重新声明值。注意注意！</span>
	<span class="token keyword">if</span> idx<span class="token punctuation">,</span>ok<span class="token operator">:=</span>find<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">!</span>ok <span class="token punctuation">{</span>
		<span class="token function">println</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">println</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,89),r={href:"https://mp.weixin.qq.com/s/0sjLD4_12Ql0QeWsO_A5pQ",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/post/6954707500151078919#heading-4",target:"_blank",rel:"noopener noreferrer"},m={href:"https://segmentfault.com/a/1190000039101378",target:"_blank",rel:"noopener noreferrer"},k={href:"https://segmentfault.com/a/1190000039101378",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zhuanlan.zhihu.com/p/366472077",target:"_blank",rel:"noopener noreferrer"};function h(b,v){const s=o("ExternalLinkIcon");return p(),i("div",null,[d,n("p",null,[n("a",r,[a("【Golang】图解map"),e(s)])]),n("p",null,[n("a",u,[a("【深度解析golang map】"),e(s)])]),n("p",null,[a("["),n("a",m,[a("由浅到深，入门Go语言Map实现原理"),e(s)]),a("]("),n("a",k,[a("https://segmentfault.com/a/1190000039101378"),e(s)]),a(")")]),n("p",null,[n("a",g,[a("golang中map底层B值的计算逻辑"),e(s)])])])}const w=t(l,[["render",h],["__file","04.map.html.vue"]]);export{w as default};
